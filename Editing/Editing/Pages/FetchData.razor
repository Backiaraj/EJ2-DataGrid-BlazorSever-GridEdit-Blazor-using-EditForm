@page "/fetchdata"

@if (Initial)
{
    <EjsDialog Width="445px" Height="500px">
        <DialogTemplates>
            <Header> <div>Details of @SelectedData.OrderID</div></Header>
            <Content>
                <div>
                    @{
                        <EditForm Model="@SelectedData" Context="formContext" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="modal-body">
                                @if (SelectedData.OrderID > 0)
                                {
                                    <p>
                                        <label for="OrderID">OrderID: </label>
                                        <InputNumber id="OrderID" class="form-control"
                                                     @bind-Value="@SelectedData.OrderID" disabled="@OkayDisabled" />
                                    </p>
                                }
                                else
                                {
                                    <p>
                                        <label for="OrderID">OrderID: </label>
                                        <InputNumber id="OrderID" class="form-control"
                                                     @bind-Value="@SelectedData.OrderID" />
                                    </p>
                                }
                                <p>
                                    <label for="CustomerID">CustomerID: </label>
                                    <InputText id="CustomerID" class="form-control"
                                               @bind-Value="@SelectedData.CustomerID" />
                                </p>
                                <p>
                                    <label for="EmployeeID">EmployeeID: </label>
                                    <InputNumber id="EmployeeID" name="EmployeeID" class="form-control"
                                                 @bind-Value="@SelectedData.EmployeeID" />
                                </p>
                                <p>
                                    <label for="Freight">Freight: </label>
                                    <InputNumber name="Freight" id="Freight" class="form-control"
                                                 @bind-Value="@SelectedData.Freight" />
                                </p>
                                @if (SelectedData.OrderID > 0)
                                {
                                    <button class="btn btn-primary" type="submit">Save</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" type="submit">Add</button>
                                }
                                <button class="btn btn-primary" type="button" @onclick="close">Cancel</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </Content>
        </DialogTemplates>
        <DialogPositionData X="@Xvalue" Y="@Yvalue"></DialogPositionData>
    </EjsDialog>
}


<EjsGrid @ref="Grid" DataSource="@Data" Toolbar="@(new List<string>() { "Add", "Delete" })" AllowPaging="true">
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
    <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" OnActionBegin="ActionBeginHandler" TValue="Orders"></GridEvents>
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Orders.OrderID) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Orders.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Orders.EmployeeID) HeaderText="Employee ID" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Orders.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</EjsGrid>

@code{
    List<Orders> Data;
    protected string OkayDisabled { get; set; } = "";

    EjsGrid<Orders> Grid;
    public List<Orders> order = new List<Orders>();
    public Orders model = new Orders();

    public Orders SelectedData = new Orders { };
    public bool Initial { get; set; } = false;

    public string Xvalue = "center";
    public string Yvalue = "center";

    public double RowIndex { get; set; }

    protected override void OnInitialized()
    {
        BindDataSource();
        this.Data = order;
    }
    private void BindDataSource()
    {
        int code = 10000;
        for (int i = 1; i < 10; i++)
        {
            order.Add(new Orders(code + 1, "ALFKI", i + 0, 2.3 * i, "Berlin", false));
            order.Add(new Orders(code + 2, "ANATR", i + 2, 3.3 * i, "Madrid", false));
            order.Add(new Orders(code + 3, "ANTON", i + 1, 4.3 * i, "Cholchester", false));
            order.Add(new Orders(code + 4, "BLONP", i + 3, 5.3 * i, "Marseille", false));
            order.Add(new Orders(code + 5, "BOLID", i + 4, 6.3 * i, "Tsawassen", false));
            code += 5;
        }
    }

    public class Orders
    {
        public Orders()
        {

        }
        public Orders(int OrderId, string CustomerId, int EmployeeId, double Freight, string ShipCity, bool isAdd)
        {
            this.OrderID = OrderId;
            this.CustomerID = CustomerId;
            this.EmployeeID = EmployeeId;
            this.Freight = Freight;
            this.ShipCity = ShipCity;
            this.IsAdd = isAdd;
        }
        [Required]
        public int OrderID { get; set; }
        [StringLength(10, ErrorMessage = "Name is too long.")]
        public string CustomerID { get; set; }
        [Required]
        public int EmployeeID { get; set; }
        [Required]
        public double Freight { get; set; }
        public string ShipCity { get; set; }
        public bool IsAdd { get; set; }
    }

    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<Orders> args)
    {
        this.Initial = true;
        this.RowIndex = args.RowIndex;
        SelectedData = new Orders { OrderID = args.RowData.OrderID, CustomerID = args.RowData.CustomerID, EmployeeID = args.RowData.EmployeeID, Freight = args.RowData.Freight, ShipCity = args.RowData.ShipCity };
    }

    public void ActionBeginHandler(ActionEventArgs<Orders> args)
    {
        if (args.RequestType.ToString() == "BeginEdit")
        {
            args.Cancel = true;
        }
        else if (args.RequestType.ToString() == "Add")
        {
            args.Cancel = true;
            this.Initial = true;
            SelectedData = new Orders { OrderID = 0, CustomerID = "", EmployeeID = 0, Freight = 0, ShipCity = "" };
        }
    }
    public void close()
    {
        this.Initial = false;
    }

    private void HandleValidSubmit()
    {
        Orders value = order.Find(x => x.OrderID == this.SelectedData.OrderID);
        if (value == null)
        {
            this.Grid.AddRecord(new Orders { OrderID = this.SelectedData.OrderID, CustomerID = this.SelectedData.CustomerID, EmployeeID = this.SelectedData.EmployeeID, Freight = this.SelectedData.Freight, ShipCity = this.SelectedData.ShipCity }, 0);
            this.Initial = false;
        }
        else
        {
            this.Grid.UpdateRow(this.RowIndex, new Orders { OrderID = this.SelectedData.OrderID, CustomerID = this.SelectedData.CustomerID, EmployeeID = this.SelectedData.EmployeeID, Freight = this.SelectedData.Freight, ShipCity = this.SelectedData.ShipCity });
            this.Initial = false;
        }
    }
}
